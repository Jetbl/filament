WHITESPACE = _{ " " | "\t" | NEWLINE }

// C-style comments
COMMENT = _{ ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Semicolon
semi = { ";" }

// Identifiers may begin with `_` or an ASCII character.
identifier = @{ ("_" | ASCII_ALPHA)+ ~ ("_" | ASCII_ALPHA | ASCII_DIGIT)* }

// Positive numbers
bitwidth = @{ ASCII_DIGIT+ }

// ====== toplevel ======

file = {
  SOI
    ~ comp_or_ext*
    ~ EOI
}



signature = {
  identifier ~ abstract_var? ~ io
}
component = {
  "component" ~ signature ~ "{" ~ cells ~ assignment* ~ "}"
}
external = {
  "extern" ~ "component" ~ signature ~ ";"
}

comp_or_ext = {
  component | external
}

// ====== Component signature ======

abstract_var = {
  "<" ~ identifier ~ ("," ~ identifier)* ~ ">"
}

within = { "@within" }
exact = { "@exact" }
interval_type = { within | exact }
interval = {
  interval_type ~ "(" ~ time ~ "," ~ time ~ ")"
}

time_port = { identifier ~ "." ~ identifier }
time_base = {
  time_port
  | identifier
  | bitwidth
}
binop_add = { "+" }
binop_sub = { "-" }
binop = _{ binop_add | binop_sub }
time_expr = { time_base ~ (binop ~ time_base)* }
time = { time_expr | time_base }

port_def = {
  interval ~ identifier ~ ":" ~ (bitwidth | identifier)
}

arrow = { "->" }

io = {
  "(" ~ ports? ~ ")" ~ arrow ~ "(" ~ ports? ~ ")"
}
ports = {
  port_def ~ ("," ~ port_def)*
}

// ====== cells ======
cell_def = {
  identifier ~ ":" ~ identifier ~ ";"
}

cells = {
  "cells" ~ "{" ~ cell_def* ~ "}"
}

// ====== Assignments ==========

port = {
  bitwidth
  | identifier ~ "." ~ identifier
  | identifier
}

arguments = {
  "(" ~ ")"
  | "(" ~ port ~ ("," ~ port)* ~ ")"
}

time_args = {
  "<" ~ time ~ ("," ~ time)* ~ ">"
}
invocation = {
  identifier ~ time_args? ~ arguments
}

assignment = {
  identifier ~ "=" ~ invocation ~ ";"
}
